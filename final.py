# -*- coding: utf-8 -*-
"""final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fxJPGC5AiUH2Qfr2P9wNGZe3TYafjHV1
"""

import pandas as pd
df_og = pd.read_csv('Road.csv')
df = df_og[['Time', 'Day_of_week', 'Age_band_of_driver', 'Driving_experience',
       'Type_of_vehicle', 'Road_surface_conditions', 'Light_conditions',
       'Weather_conditions', 'Cause_of_accident']]
df_og.head()

df_og.groupby('Accident_severity')['Number_of_casualties'].describe()

exp_mapping = {
    'Below 1yr': 'Below 2 years',
    '1-2yr': 'Below 2 years',
    '2-5yr': '2 - 5 years',
    '5-10yr': 'Above 5 years',
    'Above 10yr': 'Above 5 years',
    'No Licence': 'Unlicensed',
    'unknown': 'Unknown'
}

df = df.copy()
df['Driving_experience'] = df['Driving_experience'].replace(exp_mapping)

vehicle_mapping = {
    # High Risk
    'Public (13?45 seats)': 'High Risk - Heavy',
    'Special vehicle': 'High Risk - Heavy',
    'Lorry (11?40Q)': 'High Risk - Heavy',
    'Pick up upto 10Q': 'High Risk - Heavy',

    # Medium Risk
    'Motorcycle': 'Medium Risk - Common',
    'Automobile': 'Medium Risk - Common',
    'Taxi': 'Medium Risk - Common',
    'Stationwagen': 'Medium Risk - Common',
    'Lorry (41?100Q)': 'Medium Risk - Common',
    'Public (12 seats)': 'Medium Risk - Common',

    # Low Risk
    'Bicycle': 'Low Risk - Small',
    'Bajaj': 'Low Risk - Small',
    'Turbo': 'Low Risk - Small',
    'Ridden horse': 'Low Risk - Small',

    # Other
    'Other': 'Other/Unknown',
    'Public (> 45 seats)': 'Other/Unknown'
}

df = df.copy()
df['Type_of_vehicle'] = df['Type_of_vehicle'].replace(vehicle_mapping)

light_mapping = {
    'Daylight': 'Daylight',
    'Darkness - lights lit': 'Partial Darkness',
    'Darkness - lights unlit': 'Partial Darkness',
    'Darkness - no lighting': 'Complete Darkness'
}

df['Light_conditions'] = df['Light_conditions'].replace(light_mapping)

weather_mapping = {
    'Normal': 'Normal',
    'Raining': 'Heavy Rain',
    'Unknown': 'Unknown',
    'Cloudy': 'Normal',
    'Snow': 'Snow',
    'Other': 'Unknown',
    'Raining and Windy': 'Mild Rain',
    'Fog or mist': 'Fog',
    'Windy': 'Windy'
}

df = df.copy()
df['Weather_conditions'] = df['Weather_conditions'].replace(weather_mapping)

cause_mapping = {
    'Driving under the influence of drugs': 'Under influence',
    'Drunk driving': 'Under influence',

    'Changing lane to the left': 'Lane change',
    'Changing lane to the right': 'Lane change',

    'No priority to pedestrian': 'Priority violation',
    'No priority to vehicle': 'Priority violation',

    'Overspeed': 'Speed related',
    'Driving at high speed': 'Speed related',

    'Driving carelessly': 'Reckless driving',
    'Overtaking': 'Reckless driving',
    'Turnover': 'Reckless driving',

    'Getting off the vehicle improperly': 'Improper action',
    'Improper parking': 'Improper action',

    'Moving Backward': 'Close driving',
    'No distancing': 'Close driving',

    'Driving to the left': 'Other handling error',
    'Overturning': 'Other handling error',

    'Other': 'Other',
    'Overloading': 'Other',
    'Unknown': 'Unknown'
}

df = df.copy()
df['Cause_of_accident'] = df['Cause_of_accident'].replace(cause_mapping)

"""ENCODING CATEGORICAL DATA"""

print(df.nunique())

#cyclic
import numpy as np
import pandas as pd

day_map = {'Monday': 0, 'Tuesday': 1, 'Wednesday': 2, 'Thursday': 3,
           'Friday': 4, 'Saturday': 5, 'Sunday': 6}
df['Day_of_weekk'] = df['Day_of_week'].map(day_map)
df['Dayofweek_sin'] = np.sin(2 * np.pi * df['Day_of_weekk'] / 7)
df['Dayofweek_cos'] = np.cos(2 * np.pi * df['Day_of_weekk'] / 7)

df['Time'] = pd.to_datetime(df['Time'], format='%H:%M:%S', errors='coerce')
df['Hour'] = df['Time'].dt.hour + df['Time'].dt.minute / 60
df['Hour sin'] = np.sin(2 * np.pi * df['Hour'] / 24)
df['Hour cos'] = np.cos(2 * np.pi * df['Hour'] / 24)

cols_to_drop = ['Time', 'Day_of_week', 'Day_of_weekk', 'Hour']

df = df.drop(columns=cols_to_drop, errors='ignore')

df['Driving_experience'] = df['Driving_experience'].fillna('Unknown')
df['Type_of_vehicle'] = df['Type_of_vehicle'].replace(['Other/Unknown'], 'Unknown')
df['Type_of_vehicle'] = df['Type_of_vehicle'].fillna('Unknown')

#one hot
custom_cols = ['Road_surface_conditions', 'Light_conditions',
              'Weather_conditions', 'Cause_of_accident', 'Age_band_of_driver',
              'Driving_experience', 'Type_of_vehicle']
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder

ct = ColumnTransformer(
    transformers=[
        ('ohe', OneHotEncoder(handle_unknown='ignore', sparse_output=False), custom_cols)
    ], remainder='passthrough')

df = ct.fit_transform(df)

encoded_col_names = ct.get_feature_names_out()

df = pd.DataFrame(df, columns=encoded_col_names)

#label/ordinal
severity_mapping = {
    'Fatal injury': 2,
    'Serious Injury': 1,
    'Slight Injury': 0
}

df_og['Accident_severity'] = df_og['Accident_severity'].map(severity_mapping)

for col in df.select_dtypes(include='object').columns:
    try:
        df[col] = pd.to_numeric(df[col])
    except ValueError:
        print(f"Column '{col}' could not be converted to numeric.")

!pip install -U imbalanced-learn

from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from xgboost import XGBClassifier
from sklearn.metrics import classification_report, confusion_matrix

X = df
y = df_og['Accident_severity']

smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X, y)
X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42)

lr = LogisticRegression(max_iter=1000)
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)
print("Logistic Regression:\n", classification_report(y_test, y_pred_lr))
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
ConfusionMatrixDisplay.from_predictions(y_test, y_pred_lr)

nb = GaussianNB()
nb.fit(X_train, y_train)
y_pred_nb = nb.predict(X_test)
print("Naive Bayes:\n", classification_report(y_test, y_pred_nb))

from sklearn.utils.class_weight import compute_sample_weight

sample_weights = compute_sample_weight(class_weight='balanced', y=y_train)

xgb = XGBClassifier(eval_metric='mlogloss')
xgb.fit(X_train, y_train, sample_weight=sample_weights)

y_pred_xgb = xgb.predict(X_test)
print("XGBoost:\n", classification_report(y_test, y_pred_xgb))

from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
ConfusionMatrixDisplay.from_predictions(y_test, y_pred_xgb)

import joblib
joblib.dump(ct, 'preprocessor.pkl')
xgb.get_booster().save_model("xgb_model.json")

from google.colab import files
files.download('xgb_model.json')
files.download('preprocessor.pkl')

import sklearn, joblib, sys
print("sklearn:", sklearn.__version__)
print("joblib:", joblib.__version__)
print("python:", sys.version)
