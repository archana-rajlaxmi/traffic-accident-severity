# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WF2mnfB8XcBja_F9sTMVj7orJ0vsVcxV
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import xgboost as xgb

# Load preprocessor
preprocessor = joblib.load('preprocessor.pkl')

# Load model
model = xgb.Booster()
model.load_model('xgb_model.json')

st.title("Road Accident Severity Predictor")
st.markdown("Predicts the severity of a road accident based on given input.")

st.sidebar.header("Enter Accident Details")

#Input form
def get_user_input():
    Time = st.sidebar.time_input('Time of Accident')
    Day_of_week = st.sidebar.selectbox('Day of Week', ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'])
    Age_band_of_driver = st.sidebar.selectbox('Age band of driver', ['Under 18', '18-30', '31-50', 'Over 51', 'Unknown'])
    Driving_experience = st.sidebar.selectbox('Driving experience', ['Below 2 years', '2 - 5 years', 'Above 5 years', 'Unlicensed', 'Unknown'])
    Vehicle_type = st.sidebar.selectbox('Type of vehicle', [
        'High Risk - Heavy', 'Medium Risk - Common', 'Low Risk - Small', 'Unknown'
    ])
    Road_surface_conditions = st.sidebar.selectbox('Road surface conditions', ['Dry', 'Wet or damp', 'Snow', 'Flood over 3cm', 'Unknown'])
    Light_conditions = st.sidebar.selectbox('Light conditions', ['Daylight', 'Partial Darkness', 'Complete Darkness'])
    Weather_conditions = st.sidebar.selectbox('Weather conditions', ['Normal', 'Heavy Rain', 'Mild Rain', 'Fog', 'Snow', 'Windy', 'Unknown'])
    Cause_of_accident = st.sidebar.selectbox('Cause of accident', [
        'Under influence', 'Lane change', 'Priority violation', 'Speed related',
        'Reckless driving', 'Improper action', 'Close driving', 'Other handling error',
        'Other', 'Unknown'
    ])

    df = pd.DataFrame({
        'Time': [Time.strftime('%H:%M:%S')],
        'Day_of_week': [Day_of_week],
        'Age_band_of_driver': [Age_band_of_driver],
        'Driving_experience': [Driving_experience],
        'Type_of_vehicle': [Vehicle_type],
        'Road_surface_conditions': [Road_surface_conditions],
        'Light_conditions': [Light_conditions],
        'Weather_conditions': [Weather_conditions],
        'Cause_of_accident': [Cause_of_accident]
    })
    return df

input_df = get_user_input()

input_df['Time'] = pd.to_datetime(input_df['Time'], format='%H:%M:%S', errors='coerce')
input_df['Hour'] = input_df['Time'].dt.hour + input_df['Time'].dt.minute / 60
input_df['Hour sin'] = np.sin(2 * np.pi * input_df['Hour'] / 24)
input_df['Hour cos'] = np.cos(2 * np.pi * input_df['Hour'] / 24)

day_map = {'Monday': 0, 'Tuesday': 1, 'Wednesday': 2, 'Thursday': 3,
           'Friday': 4, 'Saturday': 5, 'Sunday': 6}
input_df['Day_of_weekk'] = input_df['Day_of_week'].map(day_map)
input_df['Dayofweek_sin'] = np.sin(2 * np.pi * input_df['Day_of_weekk'] / 7)
input_df['Dayofweek_cos'] = np.cos(2 * np.pi * input_df['Day_of_weekk'] / 7)

X_transformed = preprocessor.transform(input_df)

if st.button("Predict severity"):
    prediction = model.predict(X_transformed)
    severity_map = {0: 'Slight Injury', 1: 'Serious Injury', 2: 'Fatal Injury'}
    st.subheader("Prediction Result:")
    st.success(severity_map[int(prediction[0])])