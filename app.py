# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WF2mnfB8XcBja_F9sTMVj7orJ0vsVcxV
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import xgboost as xgb

# Load processed feature template
reference_df = pd.read_csv('processed_input.csv')  # This is the file you preprocessed fully
feature_columns = reference_df.drop(columns=['Severity']).columns  # exclude label

# Load model
model = xgb.Booster()
model.load_model('xgb_model.json')

st.title("Traffic Accident Severity Predictor")

# Collect dropdown inputs
light = st.selectbox("Light Conditions", [
    'Daylight', 'Complete Darkness', 'Partial Darkness'
])

weather = st.selectbox("Weather Conditions", [
    'Normal', 'Mild Rain', 'Heavy Rain', 'Fog', 'Snow', 'Windy', 'Unknown'
])

road = st.selectbox("Road Surface Conditions", [
    'Dry', 'Wet or damp', 'Snow', 'Flood over 3cm. deep'
])

cause = st.selectbox("Cause of Accident", [
    'Speed related', 'Reckless driving', 'Lane change', 'Improper action',
    'Close driving', 'Priority violation', 'Other', 'Other handling error',
    'Under influence', 'Unknown'
])

age = st.selectbox("Age Band of Driver", [
    'Under 18', '18-30', '31-50', 'Over 51', 'Unknown'
])

experience = st.selectbox("Driving Experience", [
    'Below 2 years', '2 - 5 years', 'Above 5 years', 'Unlicensed', 'Unknown'
])

vehicle = st.selectbox("Type of Vehicle", [
    'Low Risk - Small', 'Medium Risk - Common', 'High Risk - Heavy', 'Long lorry', 'Unknown'
])

day = st.selectbox("Day of Week", [
    'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'
])

hour = st.slider("Hour of Accident", 0, 23, 12)

# Feature engineering
hour_sin = np.sin(2 * np.pi * hour / 24)
hour_cos = np.cos(2 * np.pi * hour / 24)

day_map = {'Monday': 0, 'Tuesday': 1, 'Wednesday': 2, 'Thursday': 3,
           'Friday': 4, 'Saturday': 5, 'Sunday': 6}
day_val = day_map[day]
day_sin = np.sin(2 * np.pi * day_val / 7)
day_cos = np.cos(2 * np.pi * day_val / 7)

# Construct input row with same columns as reference_df
input_data = pd.DataFrame(columns=feature_columns)
input_data.loc[0] = 0  # initialize with zeros

# Set proper one-hot encoded values
input_data.loc[0, f"ohe__Light_conditions_{light}"] = 1
input_data.loc[0, f"ohe__Weather_conditions_{weather}"] = 1
input_data.loc[0, f"ohe__Road_surface_conditions_{road}"] = 1
input_data.loc[0, f"ohe__Cause_of_accident_{cause}"] = 1
input_data.loc[0, f"ohe__Age_band_of_driver_{age}"] = 1
input_data.loc[0, f"ohe__Driving_experience_{experience}"] = 1
input_data.loc[0, f"ohe__Type_of_vehicle_{vehicle}"] = 1
input_data.loc[0, "remainder__Hour sin"] = hour_sin
input_data.loc[0, "remainder__Hour cos"] = hour_cos
input_data.loc[0, "remainder__Dayofweek_sin"] = day_sin
input_data.loc[0, "remainder__Dayofweek_cos"] = day_cos

# Predict
if st.button("Predict Severity"):
    dmatrix = xgb.DMatrix(input_data)
    prediction = model.predict(dmatrix)
    predicted_class = int(np.round(prediction[0]))
    st.success(f"Predicted Severity: {predicted_class}")